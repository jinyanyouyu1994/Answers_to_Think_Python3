### 24.1-8
class Node:
    def __init__(self, cargo = None, next = None):
        self.cargo = cargo
        self.next = next

    def __str__(self):
        return str(self.cargo)

def print_list(node):
    while node is not None:
        print(node, end = " ")
        node = node.next
    print()

#def print_backward(list): # return a backward list
    #if list is None: return
    #head = list
    #tail = list.next
    #print_backward(tail)
    #print(head, end = " ")

def print_backward(list):
    if list is None:return
    print_backward(list.next)
    print(list,end = " ")

def remove_second(list):
    if list is None:return
    first = list
    second = list.next
    first.next = second.next
    second.next = None
    return second
	
def print_bw_nicely(list):
    print("[",end = " ")
    print_backward(list)
    print("]")


node1 = Node(1)
node2 = Node(2)
node3 = Node([])
node1.next = node2
node2.next = node3
print(print_list(node1))
print(print_bw_nicely(node1))
rev = remove_second(node1)
print(print_list(rev))
print(print_list(node1))

### 24.9

class LinkedList:
    def __init__(self):
        self.length = 0
        self.head = None

    def print_backward(self):  # the wrapper
        print("[", end=" ")
        if self.head is not None:
            self.head.print_backward()

    def add_first(self, cargo):
        node = Node(cargo)
        node.next = self.head
        self.head = node
        self.length += 1

class Node:
    def __init__(self, cargo = None, next = None):
        self.cargo = cargo
        self.next = next

    def __str__(self):
        return str(self.cargo)

    def print_backward(self): # the helper
        if self.next is not None:
            tail = self.next
            tail.print_backward()
        print(self.cargo, end= " ")

node1 = Node(1)
node2 = Node(2)
node3 = Node(3)
node1.next = node2
node2.next = node3
print(node1.print_backward())


























