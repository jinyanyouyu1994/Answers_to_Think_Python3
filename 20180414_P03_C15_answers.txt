class Point:
    """ Point class represents and manipulates x,y coords. """
    def __init__(self):
        self.x = 0
        self.y = 0

p = Point()
q = Point()

print(p.x,p.y,q.x,q.y)

###

class Point:
    """ Point class represents and manipulates x,y coords. """
    def __init__(self, x = 0, y = 0):
        self.x = x
        self.y = y

def distance_from_origin(self):
    return ((self.x ** 2) + (self.y ** 2)) ** 0.5
	
def print_point(pt):
    print("({0}, {1})".format(pt.x,pt.y))

pt = Point(3,4)
print_point(pt)

###

class Point:
    """ Point class represents and manipulates x,y coords. """
    def __init__(self, x = 0, y = 0):
        self.x = x
        self.y = y

    def to_string(self):
        print("({0}, {1})".format(self.x,self.y))

p = Point(3,4)
print(p.to_string())

###

class Point:
    """ Point class represents and manipulates x,y coords. """
    def __init__(self, x = 0, y = 0):
        self.x = x
        self.y = y

    def __str__(self):
        return ("({0}, {1})".format(self.x,self.y))

p = Point(3,4)
str(p)
print(p)

###

class Point:
    #...

    def halfway(self,target):
        mx = (self.x + target.x)/2
        my = (self.y +target.y)/2
        return Point(mx,my)

p = Point(3, 4)
q = Point(5, 12)
r = p.halfway(q)
print(r)

### T1

class Point:
    #...

    def distance(self,target):
        return (((self.x-target.x) ** 2) + ((self.y-target.y) ** 2))**0.5


p = Point(1, 2)
q = Point(4, 6)
r = p.distance(q)
print(r)

### T2

class Point:
   #...
   
    def reflect_x(self):
        mx = self.x
        my = -self.y
        return Point(mx,my)

p = Point(1, 2)
r = p.reflect_x()
print(r)

###  T3

class Point:
   #...
   
    def slope_from_origin(self):
        s = self.y/self.x
        return s

p = Point(4,10)
r = p.slope_from_origin()
print(r)

### T4
class Point:
    #...

    def get_line_to(self,target):
        if self.x != target.x:
            m = (self.y-target.y)/(self.x-target.x)
            c = ((self.x*target.y)-(self.y*target.x))/(self.x-target.x)
            return Point(m,c)
        else:
            return self.x

print(Point(4, 11).get_line_to(Point(6, 15)))


### T5

class Point:
    #...

    def distance(self, target):
        return (((self.x - target.x) ** 2) + ((self.y - target.y) ** 2)) ** 0.5

    def midpoint_circle(self,p1,p2,p3,p4):
        d1 = self.distance(p1)
        d2 = self.distance(p2)
        d3 = self.distance(p3)
        d4 = self.distance(p4)
        if d1 == d2 == d3 == d4:
            return True
p1 = Point(0,1)
p2 = Point(1,2)
p3 = Point(1,0)
p4 = Point(2,1)
self = Point(1,1)
print(self.midpoint_circle(p1,p2,p3,p4))
#### 这种方法只能是根据已知的五个点去验证圆心，不能求出未知的圆心。

###T6

class SMS_store:
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y

    def __str__(self):
        return ("({0}, {1})".format(self.x, self.y))

    def add_new_arrival(my_inbox,from_number,time_arrived,text_of_SMS):

    def message_count(my_inbox,target):
        count = 0
        for
        num = my_inbox.add_new_arrival(target)
        count += 1
    def get_unread_indexes():

    def get_message():
        
    def delete(self):
        
    def clear(self):


class Point:
    """ Point class represents and manipulates x,y coords. """
    def __init__(self, x = 0, y = 0):
        self.x = x
        self.y = y

    def __str__(self):
        return ("({0}, {1})".format(self.x,self.y))

class SMS_store:
    def __init__(self, n, t, txt):
        self.num = n
        self.time = t
        self.text = txt

    def __str__(self):
        return ("({0}, {1}, {2})".format(self.num, self.time, self.text))

    def add_new_arrival(my_inbox, t):
        pi = 0
        while pi < len(t):
            my_inbox.num += t[pi].num
            my_inbox.time += t[pi].time
            my_inbox.text += t[pi].text
            print("the text is {0}.".format(my_inbox.add_new_arrival(t[pi])))
            pi += 1
        return my_inbox
my_inbox = SMS_store(0,0,"")
p1 = SMS_store(123,20180414,"Your are a dog!")
p2 = SMS_store(456,20180415,"Enjou yourself")
p = [p1,p2]
print(my_inbox.add_new_arrival(p))

    def add_new_arrival(my_inbox, t):
        my_inbox.num += t.num
        my_inbox.time += t.time
        my_inbox.text += t.text
        return my_inbox











