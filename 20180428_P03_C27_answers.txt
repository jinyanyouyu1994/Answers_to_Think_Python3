class Tree:
    def __init__(self, cargo, left = None, right = None): # the left and right parameters are optional: the default value is None.也就是说这个函数不一定要把这两个参数带上
        self.cargo = cargo
        self.left = left
        self.right = right

    def __str__(self):
        return str(self.cargo)

def total(tree):
    if tree is None:return 0
    return total(tree.left) +total(tree.right) + tree.cargo

tree = Tree("+", Tree(1),Tree("*", Tree(2), Tree(3)))
def print_tree(tree):
    if tree is None:return
    print(tree.cargo, end = " ")
    print_tree(tree.left)
    print_tree(tree.right)

def print_tree_indented(tree, level = 0):
    if tree is None:return
    print_tree_indented(tree.right, level + 1)
    print("  " *level + str(tree.cargo))
    print_tree_indented(tree.left, level + 1)

###

def token_list(s):# 还需要调整
    import re
    token_list = re.split("([^0-9])",s)
    return token_list

def get_token(token_list, expected):
    if token_list[0] == expected:
        del token_list[0]
        return True
    return False

def get_num(token_list):
    x = token_list[0]
    if type(x) != type(0):return None
    del token_list[0]
    return Tree(x, None, None)

def get_prd(token_list):
    a = get_num(token_list)
    if get_token(token_list,"*"):
        b = get_prd(token_list)
        return Tree("*",a, b)
    return a

###

class Tree:
    def __init__(self, cargo, left = None, right = None): # the left and right parameters are optional: the default value is None.也就是说这个函数不一定要把这两个参数带上
        self.cargo = cargo
        self.left = left
        self.right = right

    def __str__(self):
        return str(self.cargo)

def total(tree):
    if tree is None:return 0
    return total(tree.left) +total(tree.right) + tree.cargo

tree = Tree("+", Tree(1),Tree("*", Tree(2), Tree(3)))
def print_tree(tree):
    if tree is None:return
    print(tree.cargo, end = " ")
    print_tree(tree.left)
    print_tree(tree.right)

def print_tree_indented(tree, level = 0):
    if tree is None:return
    print_tree_indented(tree.right, level + 1)
    print("  " *level + str(tree.cargo))
    print_tree_indented(tree.left, level + 1)

def get_token(token_list, expected):
    if token_list[0] == expected:
        del token_list[0]
        return True
    return False

def get_num(token_list):
    if get_token(token_list,"("):
        x = get_sum(token_list)
        if not get_token(token_list,")"):
            raise ValueError('Missing close parenthesis')
        return x
    else:
        x = token_list[0]
        if type(x) != type(0):return None
        del token_list[0]
        return Tree(x, None, None)

def get_prd(token_list):
    a = get_num(token_list)
    if get_token(token_list,"*"):
        b = get_prd(token_list)
        return Tree("*",a, b)
    return a

def get_sum(token_list):
    a = get_prd(token_list)
    if get_token(token_list,"+"):
        b = get_sum(token_list)
        return Tree("+", a, b)
    return a

token_list = [9, "*", "(", 11, "+", 5, ")", "*", 7, "end"]
tree = get_sum(token_list)
print(print_tree_indented(tree))

### animal tree

class Tree:
    def __init__(self, cargo, left = None, right = None): # the left and right parameters are optional: the default value is None.也就是说这个函数不一定要把这两个参数带上
        self.cargo = cargo
        self.left = left
        self.right = right

    def __str__(self):
        return str(self.cargo)

def total(tree):
    if tree is None:return 0
    return total(tree.left) +total(tree.right) + tree.cargo

def print_tree(tree):
    if tree is None:return
    print(tree.cargo, end = " ")
    print_tree(tree.left)
    print_tree(tree.right)

def print_tree_indented(tree, level = 0):
    if tree is None:return
    print_tree_indented(tree.right, level + 1)
    print("  " *level + str(tree.cargo))
    print_tree_indented(tree.left, level + 1)

def yes(ques):
    ans = input(ques).lower()
    return ans[0] == "y"

def animal():
    root = Tree("bird")
    while True:
        print()
        if not yes("Are you thinking of an animal?"):break

        tree = root
        while tree.left is not None:
            prompt = tree.cargo +"? "
            if yes(prompt):
                tree = tree.right
            else:
                tree = tree.left

        guess = tree.cargo
        prompt = "Is it a " + guess + "? "
        if yes(prompt):
            print("I rule!")
            continue

        prompt = "What is the animal’s name? "
        animal = input(prompt)
        prompt = "What question would distinguish a {0} from a {1}? "
        question = input(prompt.format(animal, guess))

        tree.cargo = question
        prompt = "If the animal were {0} the answer would be? "
        if yes(prompt.format(animal)):
            tree.left = Tree(guess)
            tree.right = Tree(animal)
        else:
            tree.left = Tree(animal)
            tree.right = Tree(guess)

animal()






















